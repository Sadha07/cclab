Step 1: Make sure Hadoop is installed and running
> hadoop version
Step 2: Make sure javac is running correctly
> javac -version
Step 3: Now create a java file named Wordcount.java and write the code:
import java.io.IOException;
import java.util.StringTokenizer;
import org.apache.hadoop.conf.Configuration;
import org.apache.hadoop.fs.Path;
import org.apache.hadoop.io.IntWritable;
import org.apache.hadoop.io.Text;
import org.apache.hadoop.mapreduce.Job;
import org.apache.hadoop.mapreduce.Mapper;
import org.apache.hadoop.mapreduce.Reducer;
import org.apache.hadoop.mapreduce.lib.input.FileInputFormat;
import org.apache.hadoop.mapreduce.lib.output.FileOutputFormat;
public class WordCount {
 public static class TokenizerMapper
 extends Mapper<Object, Text, Text, IntWritable>{
 private final static IntWritable one = new IntWritable(1);
Ex. No: 7 Use Apache Hadoop write a word count program to demonstrate the use of 
Map and Reduce tasks 
Date:
 private Text word = new Text();
 public void map(Object key, Text value, Context context
 ) throws IOException, InterruptedException {
 StringTokenizer itr = new StringTokenizer(value.toString());
 while (itr.hasMoreTokens()) {
 word.set(itr.nextToken());
 context.write(word, one);
 }
 }
 }
 public static class IntSumReducer
 extends Reducer<Text,IntWritable,Text,IntWritable> {
 private IntWritable result = new IntWritable();
 public void reduce(Text key, Iterable<IntWritable> values,
 Context context
 ) throws IOException, InterruptedException {
 int sum = 0;
 for (IntWritable val : values) {
 sum += val.get();
 }
 result.set(sum);
 context.write(key, result);
 }
 }
 public static void main(String[] args) throws Exception {
 Configuration conf = new Configuration();
 Job job = Job.getInstance(conf, "word count");
 job.setJarByClass(WordCount.class);
 job.setMapperClass(TokenizerMapper.class);
 job.setCombinerClass(IntSumReducer.class);
 job.setReducerClass(IntSumReducer.class);
 job.setOutputKeyClass(Text.class);
 job.setOutputValueClass(IntWritable.class);
 FileInputFormat.addInputPath(job, new Path(args[0]));
 FileOutputFormat.setOutputPath(job, new Path(args[1]));
 System.exit(job.waitForCompletion(true) ? 0 : 1);
 }
}
Step 4: Now, create folder for input data. Name a text file named ‘input.txt’ and add in the folder.
Add your own text in the folder.
Step 5: Create new folder to hold java class files. Now setup HADOOP_CLASSPATH 
environment variable and make sure it has been set correctly
> export HADOOP_CLASSPATH = $(Hadoop_classpath)
> echo $ HADOOP_CLASSPATH
Step 6: Create a directory on HDFS and create a directory inside of it for the input
> hadoop fs -mkdir /Wordcount
> hadoop fs -mkdir /Wordcount/Input
Step 7: To check go to localhost:50070
Step 8: Upload input file to the directory
> hadoop fs -put ‘/home/Desktop/Wordcount/input_data/input.txt’ /Wordcount/Input
Now check in the browser. The directory will appear.
Step 9: Now change directory and compile the java code.Put the output files in one jar file.The jar 
file is added.
> jar -cvf first.jar -C Wordcount
Step 10: Now, run the jar file on Hadoop. The output is displayed.
> hadoop dfs -cat Wordcount/Output/*